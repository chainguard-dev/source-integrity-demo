name: Release Latest Changes

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write

    # The "_DEFAULT" env vars below allow this to work out-of-the-box under "chainguard-dev" org.
    # The "_OVERRIDE" env vars below override the default ones, and are sourced from GitHub secrets.
    # If running this workflow from a fork, you must set the following secrets in your repository settings:
    # PROJECT_ID, WORKLOAD_IDENTITY_PROVIDER, SERVICE_ACCOUNT_NAME, CLUSTER_NAME, CLUSTER_LOCATION
    env:
      # Uncomment to enable signing and add SBOM - jo
      ENABLE_SIGNING: true

      # Google Cloud project ID
      PROJECT_ID_DEFAULT: chainguard-demo
      PROJECT_ID_OVERRIDE: ${{ secrets.PROJECT_ID }}

      # To properly set this up, see "Setting up Identity Federation for GitHub Actions"
      # https://cloud.google.com/blog/products/identity-security/enabling-keyless-authentication-from-github-actions
      WORKLOAD_IDENTITY_PROVIDER_DEFAULT: projects/895401504149/locations/global/workloadIdentityPools/github-actions-pool/providers/github-actions-provider
      WORKLOAD_IDENTITY_PROVIDER_OVERRIDE: ${{ secrets.WORKLOAD_IDENTITY_PROVIDER }}

      # This service account must have write access to GCR and the GKE cluster
      SERVICE_ACCOUNT_NAME_DEFAULT: github-actions
      SERVICE_ACCOUNT_NAME_OVERRIDE: ${{ secrets.SERVICE_ACCOUNT_NAME }}

      # GKE cluster details
      CLUSTER_NAME_DEFAULT: chainguard-dev
      CLUSTER_LOCATION_DEFAULT: us-west1
      CLUSTER_NAME_OVERRIDE: ${{ secrets.CLUSTER_NAME }}
      CLUSTER_LOCATION_OVERRIDE: ${{ secrets.CLUSTER_LOCATION }}

    steps:
      - name: 'Setup env vars'
        run: |
          echo "PROJECT_ID=${PROJECT_ID_OVERRIDE:-${PROJECT_ID_DEFAULT}}" >> $GITHUB_ENV
          echo "WORKLOAD_IDENTITY_PROVIDER=${WORKLOAD_IDENTITY_PROVIDER_OVERRIDE:-${WORKLOAD_IDENTITY_PROVIDER_DEFAULT}}" >> $GITHUB_ENV
          echo "SERVICE_ACCOUNT_NAME=${SERVICE_ACCOUNT_NAME_OVERRIDE:-${SERVICE_ACCOUNT_NAME_DEFAULT}}" >> $GITHUB_ENV
          echo "CLUSTER_NAME=${CLUSTER_NAME_OVERRIDE:-${CLUSTER_NAME_DEFAULT}}" >> $GITHUB_ENV
          echo "CLUSTER_LOCATION=${CLUSTER_LOCATION_OVERRIDE:-${CLUSTER_LOCATION_DEFAULT}}" >> $GITHUB_ENV
      - uses: actions/checkout@v2
      
      # Configure Workload Identity Federation and generate an access token.
      - id: 'auth'
        name: 'Authenticate to Google Cloud'
        uses: 'google-github-actions/auth@v0'
        with:
          token_format: 'access_token'
          workload_identity_provider: 'projects/123456789/locations/global/workloadIdentityPools/my-pool/providers/my-provider'
          service_account: 'my-service-account@my-project.iam.gserviceaccount.com'

      - uses: 'google-github-actions/setup-gcloud@v0'
        with:
          project_id: ${{ env.PROJECT_ID }}
          run: |-
            gcloud auth configure-docker
            
      - name: Docker configuration
        run:  echo ${{steps.auth.outputs.access_token}} | docker login -u oauth2accesstoken --password-stdin https://$GAR_LOCATION-docker.pkg.dev
        
        # Get the GKE credentials so we can deploy to the cluster
      - name: Set up GKE credentials
        uses: google-github-actions/get-gke-credentials@v0
        with:
          cluster_name: ${{ env.GKE_CLUSTER }}
          location: ${{ env.GKE_ZONE }}

      # Build the Docker image
      - name: Build
        run: |-
          docker build \
            --tag "$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$IMAGE:$GITHUB_SHA" \
            --build-arg GITHUB_SHA="$GITHUB_SHA" \
            --build-arg GITHUB_REF="$GITHUB_REF" \
            .
      # Push the Docker image to Google Artifact Registry
      - name: Publish
        run: |-
          docker push "$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$IMAGE:$GITHUB_SHA"
      # Set up kustomize
      - name: Set up Kustomize
        run: |-
          curl -sfLo kustomize https://github.com/kubernetes-sigs/kustomize/releases/download/v3.1.0/kustomize_3.1.0_linux_amd64
          chmod u+x ./kustomize
      # Deploy the Docker image to the GKE cluster
      - name: Deploy
        run: |-
          # replacing the image name in the k8s template
          ./kustomize edit set image LOCATION-docker.pkg.dev/PROJECT_ID/REPOSITORY/IMAGE:TAG=$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$IMAGE:$GITHUB_SHA
          ./kustomize build . | kubectl apply -f -
          kubectl rollout status deployment/$DEPLOYMENT_NAME
          kubectl get services -o wide
