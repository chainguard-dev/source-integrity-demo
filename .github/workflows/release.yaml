name: Release Latest Changes

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write

    # The "_DEFAULT" env vars below allow this to work out-of-the-box under "chainguard-dev" org.
    # The "_OVERRIDE" env vars below override the default ones, and are sourced from GitHub secrets.
    # If running this workflow from a fork, you must set the following secrets in your repository settings:
    # PROJECT_ID, WORKLOAD_IDENTITY_PROVIDER, SERVICE_ACCOUNT_NAME, CLUSTER_NAME, CLUSTER_LOCATION
    env:
      # Uncomment to enable signing and add SBOM - jo
      ENABLE_SIGNING: true
#       ENABLE_SCANNING: true
       
      # Google Cloud project ID
      PROJECT_ID_DEFAULT: chainguard-demo
      
      REGISTRY: gcr.io
      IMAGE_NAME: chainguard-demo/demo-app
  
      # To properly set this up, see "Setting up Identity Federation for GitHub Actions"
      # https://cloud.google.com/blog/products/identity-security/enabling-keyless-authentication-from-github-actions
      WORKLOAD_IDENTITY_PROVIDER_DEFAULT: projects/895401504149/locations/global/workloadIdentityPools/github-actions-pool/providers/github-actions-provider
      
      # This service account must have write access to GCR and the GKE cluster
      SERVICE_ACCOUNT_NAME_DEFAULT: github-actions

      # GKE cluster details
      CLUSTER_NAME_DEFAULT: chainguard-dev
      CLUSTER_LOCATION_DEFAULT: us-west1

    steps:
      - name: 'Setup env vars'
        run: |
          echo "PROJECT_ID=${PROJECT_ID_OVERRIDE:-${PROJECT_ID_DEFAULT}}" >> $GITHUB_ENV
          echo "WORKLOAD_IDENTITY_PROVIDER=${WORKLOAD_IDENTITY_PROVIDER_OVERRIDE:-${WORKLOAD_IDENTITY_PROVIDER_DEFAULT}}" >> $GITHUB_ENV
          echo "SERVICE_ACCOUNT_NAME=${SERVICE_ACCOUNT_NAME_OVERRIDE:-${SERVICE_ACCOUNT_NAME_DEFAULT}}" >> $GITHUB_ENV
          echo "CLUSTER_NAME=${CLUSTER_NAME_OVERRIDE:-${CLUSTER_NAME_DEFAULT}}" >> $GITHUB_ENV
          echo "CLUSTER_LOCATION=${CLUSTER_LOCATION_OVERRIDE:-${CLUSTER_LOCATION_DEFAULT}}" >> $GITHUB_ENV
      
      - name: Checkout
        uses: actions/checkout@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
    
      - id: 'auth'
        name: 'Authenticate to Google Cloud'
        uses: 'google-github-actions/auth@v1'
        with:
          token_format: 'access_token'
          workload_identity_provider: '${{ env.WORKLOAD_IDENTITY_PROVIDER }}'
          service_account: '${{ env.SERVICE_ACCOUNT_NAME }}@${{ env.PROJECT_ID }}.iam.gserviceaccount.com'        
      
      - uses: 'google-github-actions/setup-gcloud@v0'
        with:
          project_id: ${{ env.PROJECT_ID }}
      - run: gcloud auth configure-docker
      
      - name: Docker configuration
        run: echo ${{steps.auth.outputs.access_token}} | docker login -u oauth2accesstoken --password-stdin https://gcr.io
        
      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          flavor: |
            latest=auto
     
      # Build the Docker image
      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@v3
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
      
      - uses: sigstore/cosign-installer@main
        if: env.ENABLE_SIGNING == 'true'
        with:
         cosign-release: 'v1.13.1'

      - name: Sign the container image
        if: env.ENABLE_SIGNING == 'true'
        env:
         COSIGN_EXPERIMENTAL: "true"
        run: |
          NEW_IMAGE=${{ steps.meta.outputs.tags }}@${{ steps.build-and-push.outputs.digest }}
          cosign sign ${NEW_IMAGE} --force
      
      - name: Rescan image
        if: env.ENABLE_SCANNING == 'true'
        env:
         COSIGN_EXPERIMENTAL: "true"
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ steps.meta.outputs.tags }}@${{ steps.build-and-push.outputs.digest }}
          format: 'sarif'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'
          output: 'trivy-results.sarif'
        
      - name: Sign & attach new scan result
        if: env.ENABLE_SCANNING == 'true'
        env:
         COSIGN_EXPERIMENTAL: "true"
        run: |
          cosign attest --predicate scans/php.att.json --type=vuln ${{ steps.meta.outputs.tags }}@${{ steps.build-and-push.outputs.digest }} --force 
          
      - name: Sign & attach existing scan result
        if: env.ENABLE_SCANNING != 'true'
        env:
         COSIGN_EXPERIMENTAL: "true"
        run: |
          cosign attest --type vuln --predicate att-vuln-critical-cve.json  ${{ steps.meta.outputs.tags }}@${{ steps.build-and-push.outputs.digest }} --force 
          
      - name: Connect to cluster
        run: |
          # This is the name of the cluster provisioned by our terraform templates.
          gcloud container clusters get-credentials ${{ env.CLUSTER_NAME }} --zone ${{ env.CLUSTER_LOCATION }} --project ${{ env.PROJECT_ID }}
      - name: Deploy
        run: |
          NEW_IMAGE=${{ steps.meta.outputs.tags }}@${{ steps.build-and-push.outputs.digest }}
          echo Deploying ${NEW_IMAGE}
          DEPLOYMENT_NAME="example-deployment"
          CONTAINER_NAME="$(kubectl get deployment ${DEPLOYMENT_NAME} -o json 2>/dev/null | jq -r '.spec.template.spec.containers[0].name')"
          if [[ "${CONTAINER_NAME}" ==  "" ]]; then
            # If the deployment does not already exist, create it
            kubectl create deployment ${DEPLOYMENT_NAME} --image=${NEW_IMAGE}
          else
            kubectl set image deployment/${DEPLOYMENT_NAME} ${CONTAINER_NAME}=${NEW_IMAGE}
          fi
  
